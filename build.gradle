plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

println(project.archivesBaseName + ": " + version)

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release/" } // Quilt Mappings

    maven { url = "https://mvn.devos.one/snapshots/" } // Create
    // Create Dependencies
    maven { url = "https://cursemaven.com" } // ForgeConfigApiPort
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://maven.tterrag.com/" } // Flywheel
    maven { url = "https://mvn.devos.one/snapshots/" } // Milk Lib
    maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components

    maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Trinkets, CreateFabricReiBugFix
    maven { url = "https://maven.terraformersmc.com/" } // ModMenu, EMI, Cloth Config
    maven { url = "https://maven.shedaniel.me" } // REI, Cloth config
    maven { url = "https://repo.unascribed.com" } // Ears
    maven { url = "https://jitpack.io/" }// Mixin extras, Porting Lib
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" } // DevAuth
}

dependencies {
    // Base
    minecraft ("com.mojang:minecraft:${project.minecraft_version}")
    mappings ("org.quiltmc:quilt-mappings:${project.quilt_mappings}:intermediary-v2")
    modImplementation ("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation ("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    // Create
    modImplementation ("com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_version}+mc${project.minecraft_version}")

    // Trinkets
    modImplementation ("maven.modrinth:trinkets:${project.trinkets_version}")

    // Cardinal Components
    project.cardinal_modules.replaceAll(" ", "").split(",").each { module ->
        modApi ("dev.onyxstudios.cardinal-components-api:cardinal-components-${module}:${project.cardinal_version}")
    }

    // Integrations
    modCompileOnly ("com.unascribed:ears-api:${project.ears_version}")

    // Config
    modApi ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude (group: "net.fabricmc.fabric-api")
    }
    modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}")

    // REI
    modCompileOnly ("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
        modImplementation("dev.architectury:architectury-fabric:${project.architectury_version}")

    // EMI
        modCompileOnly "dev.emi:emi-fabric:${emi_version}"

    // Item Viewers
    switch (project.item_viewer.toLowerCase()) {
        case "rei":
            modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
            modLocalRuntime("maven.modrinth:createfabricreibugfix:${project.createreibugfix_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
        case "disabled": break
        default: println("Invalid item viewer: ${project.item_viewer} must be REI, EMI or disabled"); break
    }

    // Mixin extras
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.1")))

    // Dev Only
    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}


java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories { }
}

loom {
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
    runs {
        mixinDebug {
            inherit client
            name "Mixin Debug"
            vmArg "-Dmixin.debug.export=true"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}
