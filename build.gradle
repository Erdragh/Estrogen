plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.4-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

// A task to build both, Forge and Fabric
tasks.register("buildBoth") {
    dependsOn project(":fabric").tasks.named("buildBothFabric")
    dependsOn project(":forge").tasks.named("buildBothForge")
}

tasks.register("multiplatformDatagen") {
    Project common = project(":common")
    dependsOn project(":fabric").tasks.named("runDatagen")
    // Copy the fabric only recipes to the generated resources
    copy {
        from common.file("src/main/generated/data/estrogen/recipes/.fabric")
        include "**/*.json"
        into "src/main/generated/data/estrogen/recipes/"
    }
    // Copy the forge only recipes to the generated resources
    copy {
        from common.file("src/main/generated/data/estrogen/recipes/.forge")
        include "**/*.json"
        into "src/main/generated/data/estrogen/recipes/"
    }
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchmentmc_version}@zip")
        }

        modImplementation include("maven.modrinth:jukeboxfix:${rootProject.jukeboxfix_version}")

        compileOnly("net.msrandom:multiplatform-annotations:1.0.0")
        annotationProcessor("net.msrandom:multiplatform-annotations:1.0.0")
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    // repositories for all the build.gradle files, makes it a lot easier to manage
    repositories {
        maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" } // DevAuth
        maven { url = "https://maven.terraformersmc.com/" } // EMI
        maven { url = "https://maven.shedaniel.me" } // REI
        maven { url = "https://maven.blamejared.com/" } // JEI
        maven { url = "https://maven.tterrag.com" } // Forge Registrate, Forge Flywheel
        maven { url = "https://maven.theillusivec4.top/" } // Curios
        maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Fabric Registrate
        maven { url = "https://cursemaven.com" } // Forge Config API Port
        maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
        maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
        maven { url = "https://maven.ladysnake.org/releases" } // Trinkets
        maven { url = "https://repo.unascribed.com" } // Ears
        maven { url = "https://api.modrinth.com/maven" } // Create & REI Bug Fix, Jukeboxfix
        maven { url = "https://maven.figuramc.org/releases" } // Figura
        maven { url "https://maven.msrandom.net/repository/root" } // multiplatform-annotations
        maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM | NOTE: LEAVE THIS AS LAST
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    java {
        withSourcesJar()
    }
}

publishMods {
    changelog = "${rootProject.changelog}"
    type = STABLE

    def optionsCurseforge = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add("1.20.1")
        projectId = "850410"
        requires {
            slug = "architectury-api"
        }
        optional {
            slug = "ears"
        }
        embeds {
            slug = "jukeboxfix"
        }
    }

    def optionsModrinth = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "HhIJW8n1"
        minecraftVersions.add("1.20.1")
        requires {
            slug = "architectury-api"
        }
        optional {
            slug = "ears"
        }
        embeds {
            slug = "jukeboxfix"
        }
    }

    curseforge("curseforgeFabric") {
        from optionsCurseforge
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "Create: Estrogen ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"
        requires {
            slug = "create-fabric"
        }
        requires {
            slug = "trinkets"
        }
        optional {
            slug = "roughly-enough-items"
        }
        optional {
            slug = "emi"
        }
    }

    curseforge("curseforgeForge") {
        from optionsCurseforge
        modLoaders.add("forge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "Create: Estrogen ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
        requires {
            slug = "create"
        }
        requires {
            slug = "curios"
        }
        optional {
            slug = "jei"
        }
    }

    modrinth("modrinthFabric") {
        from optionsModrinth
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "Create: Estrogen ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"
        requires {
            slug = "create-fabric"
        }
        requires {
            slug = "trinkets"
        }
        optional {
            slug = "rei"
        }
        optional {
            slug = "emi"
        }
    }

    modrinth("modrinthForge") {
        from optionsModrinth
        modLoaders.add("forge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "Create: Estrogen ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
        requires {
            slug = "create"
        }
        requires {
            slug = "curios"
        }
        optional {
            slug = "jei"
        }
    }
}