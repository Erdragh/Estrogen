plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group

println(project.archivesBaseName + ": " + version)

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release/" } // Quilt Mappings

    maven { url = "https://mvn.devos.one/snapshots/" } // Create
    // Create Dependencies
    maven { url = "https://cursemaven.com" } // ForgeConfigApiPort
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://maven.tterrag.com/" } // Flywheel
    maven { url = "https://mvn.devos.one/snapshots/" } // Milk Lib
    maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components

    maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Trinkets, CreateFabricReiBugFix
    maven { url = "https://maven.terraformersmc.com/" } // ModMenu, EMI, Cloth Config
    maven { url = "https://maven.shedaniel.me" } // REI, Cloth config
    maven { url = "https://repo.unascribed.com" } // Ears
    maven { url = "https://jitpack.io/" }// Mixin extras, Porting Lib
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" } // DevAuth
}

dependencies {
    // Base
    minecraft ("com.mojang:minecraft:${project.minecraft_version}")
    mappings ("org.quiltmc:quilt-mappings:${project.quilt_mappings}:intermediary-v2")
    modImplementation ("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation ("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    // Create
    modImplementation ("com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_version}+mc${project.minecraft_version}")

    // Trinkets
    modImplementation ("maven.modrinth:trinkets:${project.trinkets_version}")

    // Cardinal Components
    project.cardinal_modules.replaceAll(" ", "").split(",").each { module ->
        modApi ("dev.onyxstudios.cardinal-components-api:cardinal-components-${module}:${project.cardinal_version}")
    }

    // Integrations
    modCompileOnly ("com.unascribed:ears-api:${project.ears_version}")

    // Config
    modApi ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude (group: "net.fabricmc.fabric-api")
    }
    modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}")

    // REI
    modCompileOnly ("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
        modImplementation("dev.architectury:architectury-fabric:${project.architectury_version}")

    // EMI
        modCompileOnly "dev.emi:emi-fabric:${emi_version}"

    // Item Viewers
    switch (project.item_viewer.toLowerCase()) {
        case "rei":
            modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
            modLocalRuntime("maven.modrinth:createfabricreibugfix:${project.createreibugfix_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
        case "disabled": break
        default: println("Invalid item viewer: ${project.item_viewer} must be REI, EMI or disabled"); break
    }

    // Mixin extras
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.1")))

    // Dev Only
    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}") {
        exclude (group: "net.fabricmc")
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property("minecraft_version", project.minecraft_version)
    inputs.property("loader_version", project.loader_version)
    inputs.property("fabric_version", project.fabric_version)

    filesMatching("fabric.mod.json") {
        expand  "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "fabric_version": project.fabric_version
    }
}


java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories { }
}

loom {
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
    runs {
        mixinDebug {
            inherit client
            name "Mixin Debug"
            vmArg "-Dmixin.debug.export=true"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
    token = System.getenv('MODRINTH_TOKEN') // Please use an environment variable for this! The default is `$MODRINTH_TOKEN`.
    projectId = "HhIJW8n1" // The ID of your Modrinth project. Slugs will not work.
    versionNumber = "${project.mod_version}" // The (preferably SemVer) version of the mod. If not specified, it'll use the `version` declaration
    versionName = "${project.mod_version}" // The version title. If not specified, it'll use the version number
    uploadFile = remapJar // Tells Minotaur to use the remapped jar
    gameVersions = ["${project.minecraft_version}"] // An array of game versions the version supports
    loaders = ['fabric', 'quilt'] // Self-explanatory.
    changelog = "For a full changelog, you can look at the commit history on Github."
    dependencies = [
            new ModDependency('P7dR8mSH', 'required'), // Fabric API
            new ModDependency('Xbc0uyRg', 'required'), // Create
            new ModDependency('5aaWibi9', 'required'), // Trinkets
    ]
}

curseforge {
    apiKey = System.getenv('CURSE_TOKEN') != null ? System.getenv('CURSE_TOKEN') : 'xxx'
    project {
        id = '850410'
        changelog = 'For a full changelog, you can look at the commit history on Github.'
        releaseType = 'release'
        addGameVersion "${project.minecraft_version}"

        mainArtifact(jar) {
            displayName = "Estrogen ${project.mod_version}"
            relations {
                requiredDependency "trinkets"
                requiredDependency "create-fabric"
                requiredDependency "fabric-api"
            }
        }
        afterEvaluate {
            mainArtifact(remapJar)
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}


