plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {}

dependencies {
    // Fabric
    modImplementation("net.fabricmc:fabric-loader:$fabric_loader_version")

    // Fapi
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")

    //Architectury api
    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") exclude(
            group: "net.fabricmc",
            module: "fabric-loader"
    )

    //Create
    modImplementation("com.simibubi.create:create-fabric-${rootProject.minecraft_version}:${rootProject.create_fabric_version}+mc${rootProject.minecraft_version}") exclude(
            group: "net.fabricmc",
            module: "fabric-loader"
    )

    //Trinkets
    modImplementation("dev.emi:trinkets:${rootProject.trinkets_version}") exclude(
            group: "net.fabricmc",
            module: "fabric-loader"
    )
    project.cardinal_modules.replaceAll(" ", "").split(",").each { module ->
        modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-${module}:${rootProject.cardinal_version}") exclude(
                group: "net.fabricmc",
                module: "fabric-loader"
        )
    }

    // REI
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api:${rootProject.rei_version}") exclude(
            group: "net.fabricmc",
            module: "fabric-loader"
    )
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin:${rootProject.rei_version}") exclude(
            group: "net.fabricmc",
            module: "fabric-loader"
    )

    // EMI
    modCompileOnly("dev.emi:emi:${rootProject.emi_version}:api") exclude(
            group: "net.fabricmc",
            module: "fabric-loader"
    )

    //Mod Menu
    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}") exclude(
            group: "net.fabricmc",
            module: "fabric-loader"
    )

    // Item Viewers
    switch (item_viewer.toLowerCase()) {
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}") exclude(
                group: "net.fabricmc",
                module: "fabric-loader"
        ); break
        case "emi": modLocalRuntime("dev.emi:emi:${rootProject.emi_version}")exclude(
                group: "net.fabricmc",
                module: "fabric-loader"
        ); break
        case "disabled": break
        default: println("Invalid item viewer: ${item_viewer} must be REI, EMI or disabled"); break
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    Project common = project(":common")

    inputs.property "version", project.version
    inputs.property "contributors", rootProject.contributors
    inputs.property "minecraft_version", rootProject.minecraft_version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "contributors": rootProject.contributors,
                "minecraft_version": rootProject.minecraft_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

tasks.register("buildBothFabric") {
    remapJar.destinationDirectory = project.rootProject.file("build/libs")
    dependsOn remapJar
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {}
}

loom {
    Project common = project(":common")
    // Datagen, while this is in fabric only, it generates files for forge too
    runs {
        datagen {
            client()
            name "Data Generation (client)"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=estrogen"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
            exclude ".cache/**"
        }
    }
}

// Force fabric loader version to fix duplicate loader classes problem
configurations.configureEach {
    resolutionStrategy.force("net.fabricmc:fabric-loader:$fabric_loader_version")
}

configurations.modLocalRuntime {
    println("Forcing fabric loader version $fabric_loader_version")
    resolutionStrategy.force("net.fabricmc:fabric-loader:$fabric_loader_version")
}